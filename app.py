import os
import gradio as gr
from dotenv import load_dotenv
from langchain.chat_models import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from langchain_community.document_loaders import UnstructuredPDFLoader
from langchain_community.vectorstores import Chroma
from langchain_openai import OpenAIEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("Thi·∫øu OPENAI_API_KEY")

# Load v√† vector h√≥a t√†i li·ªáu
docs = []
data_folder = "data"
if os.path.exists(data_folder):
    for file in os.listdir(data_folder):
        if file.endswith(".pdf"):
            loader = UnstructuredPDFLoader(os.path.join(data_folder, file))
            docs.extend(loader.load())

if docs:
    splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks = splitter.split_documents(docs)
    embedding = OpenAIEmbeddings()
    vector_db = Chroma.from_documents(chunks, embedding, persist_directory="chroma_db")
    
    prompt = PromptTemplate(
        template="""
    B·∫°n l√† tr·ª£ l√Ω y t·∫ø th√¥ng minh. D∆∞·ªõi ƒë√¢y l√† n·ªôi dung t√†i li·ªáu B·ªô Y t·∫ø:
    {context}
    C√¢u h·ªèi: {question}
    H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát ng·∫Øn g·ªçn, ch√≠nh x√°c.
    """,
        input_variables=["context", "question"]
    )
    
    qa_chain = RetrievalQA.from_chain_type(
        llm=ChatOpenAI(
            model_name="gpt-4-turbo",
            max_tokens=200000,
            temperature=0.3
        ),
        retriever=vector_db.as_retriever(),
        chain_type_kwargs={"prompt": prompt}
    )
    
    def ask(query):
        try:
            return qa_chain.run(query)
        except Exception as e:
            return f"L·ªói: {str(e)}. Vui l√≤ng th·ª≠ c√¢u h·ªèi ng·∫Øn h∆°n."
else:
    def ask(query):
        return "Ch∆∞a c√≥ t√†i li·ªáu PDF n√†o ƒë∆∞·ª£c t·∫£i l√™n."

# L·∫•y port t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (Render t·ª± ƒë·ªông set)
port = int(os.environ.get("PORT", 7860))

# Launch app
gr.Interface(
    fn=ask, 
    inputs=gr.Textbox(placeholder="Nh·∫≠p c√¢u h·ªèi y t·∫ø c·ªßa b·∫°n..."),
    outputs=gr.Textbox(),
    title="üè• Tr·ª£ l√Ω Y t·∫ø AI",
    description="H·ªèi ƒë√°p v·ªÅ y t·∫ø d·ª±a tr√™n t√†i li·ªáu ch√≠nh th·ª©c"
).launch(
    server_name="0.0.0.0",
    server_port=port,
    share=False,
    show_error=True
)
