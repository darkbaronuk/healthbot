import os
import sys
import gradio as gr
from dotenv import load_dotenv
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from langchain_community.document_loaders import PyPDFLoader
from langchain_community.vectorstores import Chroma
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
import shutil
import threading
import time
from queue import Queue

# Setup port cho Render
port = int(os.environ.get("PORT", 7860))
print(f"üîç ENV PORT: {os.environ.get('PORT', 'Not set')}")
print(f"üîç Using port: {port}")

# Load environment variables
load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY", "").strip()

if not GOOGLE_API_KEY or GOOGLE_API_KEY == "":
    print("‚ùå GOOGLE_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!")
    GOOGLE_API_KEY = "dummy"
else:
    print(f"‚úÖ GOOGLE_API_KEY loaded: {len(GOOGLE_API_KEY)} chars")
    if GOOGLE_API_KEY.startswith("AIza"):
        print("‚úÖ API Key format valid")
    else:
        print("‚ö†Ô∏è API Key format may be invalid")

print("üöÄ Kh·ªüi ƒë·ªông Medical AI cho H·ªôi Th·∫ßy thu·ªëc tr·∫ª Vi·ªát Nam...")

# Global variables
qa_chain = None
vector_db = None
initialization_status = "‚öôÔ∏è ƒêang kh·ªüi t·∫°o h·ªá th·ªëng..."
system_ready = False
total_files = 0
total_chunks = 0

def create_vector_db_with_timeout(chunks, embedding, timeout_seconds=120):
    """T·∫°o vector database v·ªõi timeout protection"""
    
    def worker(result_queue):
        try:
            start_time = time.time()
            print(f"üíæ Creating vector database with {len(chunks)} chunks...")
            
            vector_db = Chroma.from_documents(
                documents=chunks,
                embedding=embedding,
                persist_directory=None
            )
            
            elapsed = time.time() - start_time
            result_queue.put(('success', vector_db, elapsed))
            
        except Exception as e:
            result_queue.put(('error', str(e), 0))
    
    result_queue = Queue()
    worker_thread = threading.Thread(target=worker, args=(result_queue,), daemon=True)
    
    worker_thread.start()
    worker_thread.join(timeout=timeout_seconds)
    
    if worker_thread.is_alive():
        print("‚ö†Ô∏è Vector database creation timeout - trying emergency mode")
        return None, "timeout"
    
    try:
        result_type, result_data, elapsed = result_queue.get_nowait()
        if result_type == 'success':
            print(f"‚úÖ Vector database created in {elapsed:.1f}s")
            return result_data, 'success'
        else:
            print(f"‚ùå Vector database creation failed: {result_data}")
            return None, result_data
    except:
        return None, "queue_error"

def initialize_system():
    """Kh·ªüi t·∫°o h·ªá th·ªëng"""
    global qa_chain, vector_db, initialization_status, system_ready, total_files, total_chunks
    
    print("\n‚ö° STARTING SYSTEM INITIALIZATION")
    print("=" * 50)
    
    try:
        # Step 1: Clean old data
        initialization_status = "üßπ Cleaning old data..."
        chroma_path = "chroma_db"
        if os.path.exists(chroma_path):
            shutil.rmtree(chroma_path)
            print("‚úÖ Old database cleaned")
        
        # Step 2: Load documents
        initialization_status = "üìÇ Loading documents..."
        docs = []
        data_folder = "data"
        
        if not os.path.exists(data_folder):
            print(f"‚ùå Folder {data_folder} not found")
            initialization_status = "‚ùå Data folder not found"
            return False
        
        pdf_files = [f for f in os.listdir(data_folder) if f.endswith(".pdf")]
        if not pdf_files:
            print("‚ùå No PDF files found")
            initialization_status = "‚ùå No PDF files found"
            return False
        
        # Process all files but limit pages per file
        total_files = len(pdf_files)
        max_pages_per_file = 15 if total_files > 20 else 25
        
        print(f"üìö Processing {total_files} files, max {max_pages_per_file} pages each")
        initialization_status = f"üìÑ Loading {total_files} PDF files..."
        
        for i, file in enumerate(pdf_files):
            print(f"üìÑ Loading ({i+1}/{total_files}): {file}")
            try:
                loader = PyPDFLoader(os.path.join(data_folder, file))
                file_docs = loader.load()
                
                # Limit pages per file
                if len(file_docs) > max_pages_per_file:
                    file_docs = file_docs[:max_pages_per_file]
                    print(f"   ‚ö° Using first {len(file_docs)} pages")
                
                for doc in file_docs:
                    doc.metadata.update({
                        "source_file": file,
                        "page_count": len(file_docs),
                        "file_index": i
                    })
                
                docs.extend(file_docs)
                print(f"   ‚úÖ Success: {len(file_docs)} pages")
                
            except Exception as e:
                print(f"   ‚ùå Error loading {file}: {e}")
                continue
        
        if not docs:
            print("‚ùå No documents loaded successfully")
            initialization_status = "‚ùå Failed to load documents"
            return False
        
        print(f"‚úÖ Total loaded: {len(docs)} pages from {total_files} files")
        
        # Step 3: Create chunks
        initialization_status = "‚úÇÔ∏è Creating text chunks..."
        print("‚úÇÔ∏è Creating optimized chunks...")
        
        splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=200,
            length_function=len,
            separators=["\n\n", "\n", ". ", "! ", "? ", " "]
        )
        
        chunks = splitter.split_documents(docs)
        
        # Limit total chunks for performance
        max_chunks = 300
        if len(chunks) > max_chunks:
            chunks = chunks[:max_chunks]
            print(f"‚ö° Limited to {max_chunks} chunks for optimal performance")
        
        total_chunks = len(chunks)
        print(f"‚úÖ Using {total_chunks} optimized chunks")
        
        # Step 4: Load embedding model
        initialization_status = "üîß Loading embedding model..."
        print("üîß Loading embedding model...")
        
        try:
            embedding = HuggingFaceEmbeddings(
                model_name="sentence-transformers/all-MiniLM-L6-v2",
                model_kwargs={'device': 'cpu'},
                encode_kwargs={'normalize_embeddings': True}
            )
            print("‚úÖ Embedding model loaded")
        except Exception as e:
            print(f"‚ùå Embedding model loading failed: {e}")
            initialization_status = f"‚ùå Embedding model error: {str(e)[:50]}..."
            return False
        
        # Step 5: Create vector database
        initialization_status = "üíæ Building vector database..."
        print(f"üíæ Building vector database ({total_chunks} chunks)...")
        
        vector_db, status = create_vector_db_with_timeout(chunks, embedding, timeout_seconds=120)
        
        if status == 'timeout':
            # Emergency mode
            emergency_chunks = chunks[:100]
            print(f"üö® Emergency mode: Using only {len(emergency_chunks)} chunks")
            
            try:
                vector_db = Chroma.from_documents(
                    documents=emergency_chunks,
                    embedding=embedding,
                    persist_directory=None
                )
                total_chunks = len(emergency_chunks)
                print("‚úÖ Emergency vector database created")
            except Exception as e:
                print(f"‚ùå Emergency vector DB also failed: {e}")
                initialization_status = f"‚ùå Vector DB failed: {str(e)[:50]}..."
                return False
                
        elif status != 'success':
            print(f"‚ùå Vector database creation failed: {status}")
            initialization_status = f"‚ùå Vector DB error: {status[:50]}..."
            return False
        
        # Step 6: Setup AI system
        if GOOGLE_API_KEY == "dummy":
            print("‚ùå API Key not configured")
            initialization_status = "‚ùå API Key not configured"
            return False
        
        initialization_status = "ü§ñ Setting up AI system..."
        print("ü§ñ Setting up Gemini AI...")
        
        try:
            prompt = PromptTemplate(
                template="""B·∫°n l√† tr·ª£ l√Ω y t·∫ø AI chuy√™n nghi·ªáp c·ªßa H·ªôi Th·∫ßy thu·ªëc tr·∫ª Vi·ªát Nam.

T√ÄI LI·ªÜU THAM KH·∫¢O:
{context}

C√ÇU H·ªéI: {question}

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát ch√≠nh x√°c, chuy√™n nghi·ªáp
- D·ª±a ch·ªß y·∫øu v√†o th√¥ng tin t·ª´ t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p
- N·∫øu kh√¥ng c√≥ th√¥ng tin trong t√†i li·ªáu, n√≥i r√µ "Th√¥ng tin n√†y ch∆∞a c√≥ trong t√†i li·ªáu tham kh·∫£o"
- ƒê∆∞a ra l·ªùi khuy√™n y t·∫ø c·∫©n tr·ªçng v√† khuy·∫øn kh√≠ch tham kh·∫£o Th·∫ßy thu·ªëc chuy√™n khoa
- Lu√¥n nh·∫Øc nh·ªü t·∫ßm quan tr·ªçng c·ªßa vi·ªác kh√°m b·ªánh tr·ª±c ti·∫øp

TR·∫¢ L·ªúI:""",
                input_variables=["context", "question"]
            )
            
            llm = ChatGoogleGenerativeAI(
                model="gemini-1.5-pro",
                google_api_key=GOOGLE_API_KEY,
                temperature=0.2,
                max_output_tokens=6144
            )
            
            # Test API
            print("   Testing API connection...")
            test_response = llm.invoke("Test connection")
            print(f"   ‚úÖ API test successful: {test_response.content[:30]}...")
            
            qa_chain = RetrievalQA.from_chain_type(
                llm=llm,
                retriever=vector_db.as_retriever(
                    search_kwargs={"k": 5}
                ),
                chain_type_kwargs={"prompt": prompt},
                return_source_documents=True
            )
            
            print("‚úÖ QA chain created successfully")
            
        except Exception as llm_error:
            print(f"‚ùå LLM setup failed: {llm_error}")
            error_msg = str(llm_error).lower()
            
            if "api key" in error_msg or "authentication" in error_msg:
                initialization_status = "‚ùå API Key authentication failed"
            elif "quota" in error_msg or "limit" in error_msg:
                initialization_status = "‚ùå API quota exceeded"
            else:
                initialization_status = f"‚ùå LLM error: {str(llm_error)[:100]}..."
            
            return False
        
        # Success!
        print("\n" + "=" * 50)
        print("‚úÖ SYSTEM INITIALIZATION COMPLETED!")
        print(f"üìä Statistics:")
        print(f"   ‚Ä¢ Files: {total_files}")
        print(f"   ‚Ä¢ Documents: {len(docs)} pages")
        print(f"   ‚Ä¢ Chunks: {total_chunks}")
        print(f"   ‚Ä¢ Vector DB: ‚úÖ Ready")
        print(f"   ‚Ä¢ AI Model: ‚úÖ Gemini 1.5 Pro")
        print("=" * 50)
        
        initialization_status = f"‚úÖ S·∫µn s√†ng! ({total_files} files, {total_chunks} chunks)"
        system_ready = True
        return True
        
    except Exception as e:
        print(f"\n‚ùå INITIALIZATION FAILED: {e}")
        initialization_status = f"‚ùå Error: {str(e)[:100]}..."
        import traceback
        traceback.print_exc()
        return False

def ask_question(query):
    """X·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng"""
    global initialization_status, system_ready
    
    if not query or not query.strip():
        return f"‚ùì Vui l√≤ng nh·∫≠p c√¢u h·ªèi.\n\nüìä Tr·∫°ng th√°i h·ªá th·ªëng: {initialization_status}"
    
    query = query.strip()
    
    if len(query) > 1000:
        return "üìù C√¢u h·ªèi qu√° d√†i. Vui l√≤ng r√∫t ng·∫Øn d∆∞·ªõi 1000 k√Ω t·ª±."
    
    if GOOGLE_API_KEY == "dummy":
        return """üîë L·ªói API Key - H·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh.

üìù H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:
1. Truy c·∫≠p Render Dashboard
2. V√†o Settings ‚Üí Environment  
3. Th√™m bi·∫øn GOOGLE_API_KEY v·ªõi gi√° tr·ªã t·ª´ Google AI Studio
4. Redeploy service sau khi c·∫≠p nh·∫≠t

üí° L∆∞u √Ω: API Key ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 'AIza...'"""
    
    if not system_ready or not qa_chain:
        return f"""üîß H·ªá th·ªëng AI ch∆∞a s·∫µn s√†ng.

üìä Tr·∫°ng th√°i hi·ªán t·∫°i: {initialization_status}

üí° Th√¥ng tin:
‚Ä¢ Th·ªùi gian ∆∞·ªõc t√≠nh: 2-5 ph√∫t
‚Ä¢ H·ªá th·ªëng ƒëang load v√† x·ª≠ l√Ω t√†i li·ªáu y t·∫ø
‚Ä¢ Vui l√≤ng ch·ªù v√† th·ª≠ l·∫°i sau

üîÑ Refresh trang v√† th·ª≠ l·∫°i sau √≠t ph√∫t..."""
    
    try:
        print(f"üîç Processing question: {query[:50]}...")
        
        if not hasattr(qa_chain, 'invoke'):
            return "‚ùå H·ªá th·ªëng AI ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch. Vui l√≤ng refresh trang v√† th·ª≠ l·∫°i."
        
        start_time = time.time()
        result = qa_chain.invoke({"query": query})
        processing_time = time.time() - start_time
        
        print(f"‚úÖ Question processed in {processing_time:.2f}s")
        
        answer = result.get("result", "Kh√¥ng th·ªÉ t·∫°o c√¢u tr·∫£ l·ªùi.")
        
        # Add source information
        sources = result.get("source_documents", [])
        if sources:
            source_files = set()
            for doc in sources:
                if "source_file" in doc.metadata:
                    source_files.add(doc.metadata["source_file"])
            
            if source_files:
                answer += f"\n\nüìö **Ngu·ªìn t√†i li·ªáu tham kh·∫£o:** {', '.join(sorted(source_files))}"
        
        # Add statistics
        answer += f"\n\nüìä **Th·ªëng k√™:**"
        answer += f"\n‚Ä¢ Files trong h·ªá th·ªëng: {total_files}"
        answer += f"\n‚Ä¢ Chunks tham kh·∫£o: {len(sources)}"
        answer += f"\n‚Ä¢ Th·ªùi gian x·ª≠ l√Ω: {processing_time:.1f}s"
        
        # Medical disclaimer
        answer += f"\n\n---\n‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng:** Th√¥ng tin tr√™n ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. H√£y tham kh·∫£o Th·∫ßy thu·ªëc chuy√™n khoa ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã ch√≠nh x√°c. Trong tr∆∞·ªùng h·ª£p c·∫•p c·ª©u, h√£y g·ªçi 115."
        
        return answer
        
    except Exception as e:
        print(f"‚ùå Query processing error: {e}")
        error_msg = str(e).lower()
        
        if "quota" in error_msg or "limit" in error_msg:
            return """‚ö†Ô∏è V∆∞·ª£t qu√° gi·ªõi h·∫°n API.

üìä Chi ti·∫øt:
‚Ä¢ Google AI Studio c√≥ gi·ªõi h·∫°n requests/ph√∫t cho free tier
‚Ä¢ Vui l√≤ng ch·ªù 1-2 ph√∫t v√† th·ª≠ l·∫°i
‚Ä¢ Ho·∫∑c n√¢ng c·∫•p l√™n paid plan ƒë·ªÉ c√≥ quota cao h∆°n

‚è∞ Th·ª≠ l·∫°i sau: 2-3 ph√∫t"""
            
        elif "safety" in error_msg:
            return """‚ö†Ô∏è C√¢u h·ªèi ch·ª©a n·ªôi dung ƒë∆∞·ª£c ƒë√°nh gi√° l√† nh·∫°y c·∫£m.

üí° Khuy·∫øn ngh·ªã:
‚Ä¢ Di·ªÖn ƒë·∫°t l·∫°i c√¢u h·ªèi m·ªôt c√°ch r√µ r√†ng v√† tr·ª±c ti·∫øp h∆°n
‚Ä¢ T·∫≠p trung v√†o kh√≠a c·∫°nh y t·∫ø/s·ª©c kh·ªèe c·ª• th·ªÉ
‚Ä¢ Tr√°nh c√°c t·ª´ ng·ªØ c√≥ th·ªÉ g√¢y hi·ªÉu l·∫ßm

üîÑ Vui l√≤ng th·ª≠ ƒë·∫∑t c√¢u h·ªèi kh√°c."""
            
        elif "api" in error_msg or "authentication" in error_msg:
            return """üîë L·ªói x√°c th·ª±c API Key.

‚ùå Nguy√™n nh√¢n c√≥ th·ªÉ:
‚Ä¢ API Key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng ho·∫∑c ƒë√£ h·∫øt h·∫°n
‚Ä¢ Billing account ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t trong Google Cloud
‚Ä¢ Service b·ªã v√¥ hi·ªáu h√≥a

üîó Ki·ªÉm tra t·∫°i: https://console.cloud.google.com/apis/credentials"""
            
        else:
            return f"""‚ùå C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi.

üîç Chi ti·∫øt l·ªói: {str(e)[:200]}

üí° C√°c b∆∞·ªõc kh·∫Øc ph·ª•c:
‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t
‚Ä¢ ƒê·∫∑t c√¢u h·ªèi kh√°c ho·∫∑c di·ªÖn ƒë·∫°t l·∫°i
‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi internet
‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói ti·∫øp t·ª•c"""

def create_beautiful_interface():
    """T·∫°o giao di·ªán ƒë·∫πp v√† hi·ªán ƒë·∫°i"""
    
    # Custom CSS for beautiful interface
    custom_css = """
    /* Import Google Fonts */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');
    
    /* Global Styles */
    .gradio-container {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        min-height: 100vh;
    }
    
    /* Header Styles */
    .main-header {
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 50%, #06b6d4 100%);
        padding: 2rem;
        border-radius: 1rem;
        margin: 1rem 0 2rem 0;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.2);
        position: relative;
        overflow: hidden;
    }
    
    .main-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
        opacity: 0.3;
    }
    
    .header-content {
        position: relative;
        z-index: 1;
        text-align: center;
        color: white;
    }
    
    .main-title {
        font-size: 2.5rem;
        font-weight: 800;
        margin: 0;
        background: linear-gradient(45deg, #ffffff, #e0e7ff);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        letter-spacing: -0.02em;
    }
    
    .sub-title {
        font-size: 1.2rem;
        margin: 0.5rem 0;
        opacity: 0.9;
        font-weight: 500;
    }
    
    .feature-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 1.5rem;
        padding: 1.5rem;
        background: rgba(255,255,255,0.1);
        border-radius: 0.75rem;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255,255,255,0.2);
    }
    
    .feature-item {
        text-align: center;
        padding: 1rem;
        border-radius: 0.5rem;
        background: rgba(255,255,255,0.1);
        transition: all 0.3s ease;
    }
    
    .feature-item:hover {
        background: rgba(255,255,255,0.2);
        transform: translateY(-2px);
    }
    
    .feature-icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        display: block;
    }
    
    /* Card Styles */
    .info-card {
        background: rgba(255,255,255,0.95);
        backdrop-filter: blur(20px);
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        border: 1px solid rgba(255,255,255,0.3);
        margin-bottom: 1rem;
    }
    
    .status-card {
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
        border-left: 4px solid #0ea5e9;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    
    .api-status-card {
        background: linear-gradient(135deg, #fef3c7 0%, #fed7aa 100%);
        border-left: 4px solid #f59e0b;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    
    /* Input Styles */
    .gradio-textbox {
        border-radius: 0.75rem !important;
        border: 2px solid rgba(59, 130, 246, 0.3) !important;
        transition: all 0.3s ease !important;
    }
    
    .gradio-textbox:focus {
        border-color: #3b82f6 !important;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1) !important;
    }
    
    /* Button Styles */
    .gradio-button {
        border-radius: 0.75rem !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
        border: none !important;
    }
    
    .gradio-button.primary {
        background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%) !important;
        color: white !important;
    }
    
    .gradio-button.primary:hover {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%) !important;
        transform: translateY(-1px) !important;
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4) !important;
    }
    
    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 0.75rem;
        margin-top: 1rem;
    }
    
    .stat-item {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
        border: 1px solid rgba(148, 163, 184, 0.2);
        transition: all 0.3s ease;
    }
    
    .stat-item:hover {
        background: linear-gradient(135deg, #e0f2fe 0%, #bae6fd 100%);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: #1e40af;
        display: block;
    }
    
    .stat-label {
        font-size: 0.75rem;
        color: #64748b;
        margin-top: 0.25rem;
    }
    
    /* Footer Styles */
    .footer-section {
        background: rgba(255,255,255,0.95);
        backdrop-filter: blur(20px);
        border-radius: 1rem;
        padding: 2rem;
        margin-top: 2rem;
        border: 1px solid rgba(255,255,255,0.3);
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .warning-box {
        background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
        border: 2px solid #fca5a5;
        border-radius: 0.75rem;
        padding: 1.5rem;
        margin: 1rem 0;
        position: relative;
    }
    
    .warning-box::before {
        content: '‚ö†Ô∏è';
        font-size: 1.5rem;
        position: absolute;
        top: 1rem;
        left: 1rem;
    }
    
    .warning-content {
        margin-left: 2.5rem;
        color: #7f1d1d;
        line-height: 1.6;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        .main-title {
            font-size: 1.8rem;
        }
        
        .feature-grid {
            grid-template-columns: 1fr;
        }
        
        .stats-grid {
            grid-template-columns: 1fr;
        }
    }
    
    /* Animation */
    @keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .animate-slide-up {
        animation: slideInUp 0.6s ease-out;
    }
    """
    
    with gr.Blocks(
        theme=gr.themes.Soft(
            primary_hue="blue",
            secondary_hue="sky",
            neutral_hue="slate",
            font=gr.themes.GoogleFont("Inter")
        ),
        css=custom_css,
        title="üè• H·ªôi Th·∫ßy thu·ªëc tr·∫ª Vi·ªát Nam - AI Medical Assistant"
    ) as interface:
        
        # BEAUTIFUL HEADER
        gr.HTML(f"""
        <div class="main-header animate-slide-up">
            <div class="header-content">
                <h1 class="main-title">
                    üè• H·ªòI TH·∫¶Y THU·ªêC TR·∫∫ VI·ªÜT NAM
                </h1>
                <p class="sub-title">
                    ü§ñ Tr·ª£ l√Ω Y t·∫ø AI - T∆∞ v·∫•n s·ª©c kh·ªèe th√¥ng minh 24/7
                </p>
                <p style="opacity: 0.8; margin: 0;">
                    ƒê∆∞·ª£c ph√°t tri·ªÉn b·ªüi c√°c Th·∫ßy thu·ªëc tr·∫ª Vi·ªát Nam
                </p>
                
                <div class="feature-grid">
                    <div class="feature-item">
                        <span class="feature-icon">üåê</span>
                        <strong>Website ch√≠nh th·ª©c</strong><br>
                        <a href="https://thaythuoctre.vn" target="_blank" style="color: #fbbf24; text-decoration: none; font-weight: 600;">
                            thaythuoctre.vn
                        </a>
                    </div>
                    <div class="feature-item">
                        <span class="feature-icon">ü§ñ</span>
                        <strong>AI Technology</strong><br>
                        <span style="color: #34d399; font-weight: 600;">Google Gemini Pro</span>
                    </div>
                    <div class="feature-item">
                        <span class="feature-icon">üìö</span>
                        <strong>Data Coverage</strong><br>
                        <span style="color: #f87171; font-weight: 600;">{total_files} Files Ready</span>
                    </div>
                </div>
            </div>
        </div>
        """)
        
        # MAIN CONTENT AREA
        with gr.Row():
            with gr.Column(scale=2):
                # INPUT SECTION
                gr.HTML("""
                <div class="info-card animate-slide-up">
                    <h3 style="color: #1e40af; margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 700;">
                        üí¨ ƒê·∫∑t c√¢u h·ªèi y t·∫ø
                    </h3>
                    <p style="color: #64748b; margin: 0; line-height: 1.5;">
                        H√£y m√¥ t·∫£ chi ti·∫øt tri·ªáu ch·ª©ng ho·∫∑c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t t·ª´ AI.
                    </p>
                </div>
                """)
                
                question_input = gr.Textbox(
                    lines=5,
                    placeholder="üí¨ V√≠ d·ª•: 'T√¥i b·ªã ƒëau ƒë·∫ßu k√®m s·ªët nh·∫π, c√≥ tri·ªáu ch·ª©ng ho khan. ƒê√¢y c√≥ th·ªÉ l√† b·ªánh g√¨ v√† c·∫ßn l√†m g√¨?'",
                    label="ü©∫ C√¢u h·ªèi y t·∫ø c·ªßa b·∫°n",
                    max_lines=8,
                    show_label=True,
                    elem_classes=["question-input"]
                )
                
                with gr.Row():
                    submit_btn = gr.Button(
                        "üîç T∆∞ v·∫•n v·ªõi AI Doctor", 
                        variant="primary", 
                        size="lg",
                        scale=2,
                        elem_classes=["submit-button"]
                    )
                    clear_btn = gr.Button(
                        "üóëÔ∏è X√≥a", 
                        variant="secondary", 
                        scale=1,
                        elem_classes=["clear-button"]
                    )
            
            with gr.Column(scale=1):
                # STATUS PANEL
                gr.HTML(f"""
                <div class="info-card animate-slide-up">
                    <div style="text-align: center; margin-bottom: 1.5rem;">
                        <div style="width: 60px; height: 60px; background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; margin-bottom: 1rem; font-size: 1.5rem; color: white; box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);">
                            üè•
                        </div>
                        <h3 style="color: #1e40af; margin: 0; font-size: 1.25rem; font-weight: 700;">
                            System Status
                        </h3>
                    </div>
                    
                    <div class="status-card">
                        <strong style="color: #0c4a6e;">üìä Tr·∫°ng th√°i h·ªá th·ªëng:</strong><br>
                        <span style="color: #059669; font-weight: 600; font-size: 0.9rem;">
                            {initialization_status}
                        </span>
                    </div>
                    
                    <div class="api-status-card">
                        <strong style="color: #92400e;">üîë API Status:</strong><br>
                        <span style="color: #78350f; font-weight: 600; font-size: 0.9rem;">
                            {"‚úÖ Connected & Ready" if GOOGLE_API_KEY != "dummy" else "‚ùå Not configured"}
                        </span>
                    </div>
                    
                    <div style="background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%); padding: 1rem; border-radius: 0.5rem; border-left: 4px solid #22c55e; margin-top: 1rem;">
                        <strong style="color: #14532d;">üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</strong><br>
                        <ul style="color: #166534; font-size: 0.85rem; margin: 0.5rem 0 0 0; padding-left: 1rem; line-height: 1.4;">
                            <li>M√¥ t·∫£ tri·ªáu ch·ª©ng chi ti·∫øt</li>
                            <li>ƒê·ªÅ c·∫≠p th·ªùi gian xu·∫•t hi·ªán</li>
                            <li>N√™u ƒë·ªô tu·ªïi v√† gi·ªõi t√≠nh</li>
                            <li>K·ªÉ c·∫£ ti·ªÅn s·ª≠ b·ªánh (n·∫øu c√≥)</li>
                        </ul>
                    </div>
                    
                    <div class="stats-grid">
                        <div class="stat-item">
                            <span class="stat-number">24/7</span>
                            <span class="stat-label">H·ªó tr·ª£</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">AI</span>
                            <span class="stat-label">Th√¥ng minh</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">VN</span>
                            <span class="stat-label">Ti·∫øng Vi·ªát</span>
                        </div>
                    </div>
                </div>
                """)
        
        # OUTPUT SECTION
        gr.HTML("""
        <div class="info-card animate-slide-up" style="margin-top: 2rem;">
            <h3 style="color: #1e40af; margin: 0 0 1rem 0; font-size: 1.5rem; font-weight: 700;">
                ü©∫ T∆∞ v·∫•n t·ª´ AI Doctor
            </h3>
            <p style="color: #64748b; margin: 0; line-height: 1.5;">
                C√¢u tr·∫£ l·ªùi chi ti·∫øt v√† chuy√™n nghi·ªáp t·ª´ h·ªá th·ªëng AI y t·∫ø s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y.
            </p>
        </div>
        """)
        
        answer_output = gr.Textbox(
            lines=15,
            label="",
            show_copy_button=True,
            interactive=False,
            placeholder="üîÑ ƒêang ch·ªù c√¢u h·ªèi t·ª´ b·∫°n...\n\nüí° M·∫πo: H√£y m√¥ t·∫£ tri·ªáu ch·ª©ng c√†ng chi ti·∫øt c√†ng t·ªët ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t.",
            show_label=False,
            elem_classes=["answer-output"]
        )
        
        # ENHANCED EXAMPLES SECTION
        gr.HTML("""
        <div class="info-card animate-slide-up" style="margin-top: 1.5rem;">
            <h3 style="color: #1e40af; margin: 0 0 1rem 0; font-size: 1.25rem; font-weight: 700;">
                üí° C√¢u h·ªèi m·∫´u - Click ƒë·ªÉ th·ª≠ ngay
            </h3>
            <p style="color: #64748b; margin: 0; line-height: 1.5; font-size: 0.9rem;">
                Ch·ªçn m·ªôt trong nh·ªØng c√¢u h·ªèi d∆∞·ªõi ƒë√¢y ƒë·ªÉ test kh·∫£ nƒÉng c·ªßa AI Doctor
            </p>
        </div>
        """)
        
        gr.Examples(
            examples=[
                "T√¥i b·ªã ƒëau ƒë·∫ßu k√®m s·ªët nh·∫π 37.5¬∞C, c√≥ tri·ªáu ch·ª©ng ho khan v√† m·ªát m·ªèi. ƒê√¢y c√≥ th·ªÉ l√† b·ªánh g√¨?",
                "Ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng type 2 n√™n ƒÉn g√¨ v√† tr√°nh g√¨? C√≥ th·ªÉ t·∫≠p th·ªÉ d·ª•c kh√¥ng?",
                "Thu·ªëc paracetamol u·ªëng nh∆∞ th·∫ø n√†o cho ƒë√∫ng? C√≥ t√°c d·ª•ng ph·ª• g√¨ kh√¥ng?",
                "Tr·∫ª 3 tu·ªïi b·ªã s·ªët cao 39¬∞C, co gi·∫≠t. C·∫ßn x·ª≠ l√Ω c·∫•p c·ª©u nh∆∞ th·∫ø n√†o?",
                "C√°ch nh·∫≠n bi·∫øt d·∫•u hi·ªáu ƒë·ªôt qu·ªµ? S∆° c·ª©u ban ƒë·∫ßu l√†m g√¨?",
                "Ph·ª• n·ªØ mang thai n√™n ti√™m vaccine g√¨? COVID-19 vaccine c√≥ an to√†n kh√¥ng?",
                "B·ªã vi√™m gan B c√≥ th·ªÉ l√¢y nhi·ªÖm qua ƒë∆∞·ªùng n√†o? C√°ch ph√≤ng ng·ª´a?",
                "D·∫•u hi·ªáu tr·∫ßm c·∫£m ·ªü ng∆∞·ªùi tr·∫ª? Khi n√†o c·∫ßn ƒëi kh√°m b√°c sƒ©?",
                "Nguy√™n t·∫Øc s·ª≠ d·ª•ng kh√°ng sinh: khi n√†o d√πng, d√πng bao l√¢u?",
                "B·ªã ng·ªô ƒë·ªôc th·ª±c ph·∫©m: tri·ªáu ch·ª©ng v√† c√°ch x·ª≠ l√Ω t·∫°i nh√†?",
                "ChƒÉm s√≥c da m·∫∑t b·ªã m·ª•n tr·ª©ng c√°: nguy√™n nh√¢n v√† c√°ch ƒëi·ªÅu tr·ªã?",
                "Cao huy·∫øt √°p ·ªü ng∆∞·ªùi tr·∫ª: nguy√™n nh√¢n, tri·ªáu ch·ª©ng v√† c√°ch ki·ªÉm so√°t?"
            ],
            inputs=question_input,
            label="",
            examples_per_page=6
        )
        
        # BEAUTIFUL FOOTER
        gr.HTML("""
        <div class="footer-section animate-slide-up">
            <div style="text-align: center; margin-bottom: 2rem;">
                <div style="display: inline-flex; align-items: center; gap: 1rem; margin-bottom: 1rem;">
                    <div style="width: 50px; height: 50px; background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); border-radius: 50%; display: flex; align-items: center; justify-content: center; font-size: 1.5rem; color: white; box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);">
                        üè•
                    </div>
                    <div style="text-align: left;">
                        <h4 style="margin: 0; color: #1e40af; font-size: 1.5rem; font-weight: 700;">
                            H·ªôi Th·∫ßy thu·ªëc tr·∫ª Vi·ªát Nam
                        </h4>
                        <p style="margin: 0; color: #64748b; font-size: 1rem;">
                            Vietnam Young Physicians' Association
                        </p>
                    </div>
                </div>
            </div>
            
            <!-- System Information -->
            <div style="background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%); padding: 1.5rem; border-radius: 1rem; margin-bottom: 1.5rem; border: 1px solid rgba(148, 163, 184, 0.2);">
                <h5 style="color: #1e40af; margin: 0 0 1rem 0; font-size: 1.25rem; font-weight: 600; text-align: center;">
                    üîß Th√¥ng tin h·ªá th·ªëng
                </h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                    <div style="background: white; padding: 1rem; border-radius: 0.5rem; border: 1px solid rgba(59, 130, 246, 0.2);">
                        <strong style="color: #1e40af;">üìä Data Processing:</strong><br>
                        <span style="color: #64748b; font-size: 0.9rem; line-height: 1.4;">
                            ‚Ä¢ Auto-detect all PDF files<br>
                            ‚Ä¢ Smart page sampling<br>
                            ‚Ä¢ Optimized chunking<br>
                            ‚Ä¢ Vector database ready
                        </span>
                    </div>
                    <div style="background: white; padding: 1rem; border-radius: 0.5rem; border: 1px solid rgba(34, 197, 94, 0.2);">
                        <strong style="color: #059669;">ü§ñ AI Features:</strong><br>
                        <span style="color: #64748b; font-size: 0.9rem; line-height: 1.4;">
                            ‚Ä¢ Google Gemini 1.5 Pro<br>
                            ‚Ä¢ Vietnamese language optimized<br>
                            ‚Ä¢ Medical knowledge base<br>
                            ‚Ä¢ Source document tracking
                        </span>
                    </div>
                    <div style="background: white; padding: 1rem; border-radius: 0.5rem; border: 1px solid rgba(245, 158, 11, 0.2);">
                        <strong style="color: #d97706;">‚ö° Performance:</strong><br>
                        <span style="color: #64748b; font-size: 0.9rem; line-height: 1.4;">
                            ‚Ä¢ Real-time responses<br>
                            ‚Ä¢ Timeout protection<br>
                            ‚Ä¢ Emergency fallback<br>
                            ‚Ä¢ Memory optimization
                        </span>
                    </div>
                </div>
            </div>
            
            <!-- Medical Disclaimer -->
            <div class="warning-box">
                <div class="warning-content">
                    <h5 style="color: #7f1d1d; margin: 0 0 0.5rem 0; font-size: 1.1rem; font-weight: 600;">
                        L∆ØU √ù Y KHOA QUAN TR·ªåNG
                    </h5>
                    <p style="margin: 0; line-height: 1.6;">
                        Th√¥ng tin t∆∞ v·∫•n t·ª´ AI ch·ªâ mang t√≠nh ch·∫•t <strong>tham kh·∫£o</strong> v√† <strong>kh√¥ng thay th·∫ø</strong> 
                        cho vi·ªác kh√°m b·ªánh, ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã tr·ª±c ti·∫øp t·ª´ Th·∫ßy thu·ªëc chuy√™n khoa.
                    </p>
                    <p style="margin: 0.5rem 0 0 0; line-height: 1.6;">
                        <strong>üè• H√£y ƒë·∫øn c∆° s·ªü y t·∫ø g·∫ßn nh·∫•t</strong> khi c√≥ tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng ho·∫∑c c·∫ßn h·ªó tr·ª£ y t·∫ø kh·∫©n c·∫•p.<br>
                        <strong>üìû S·ªë ƒëi·ªán tho·∫°i c·∫•p c·ª©u: 115</strong>
                    </p>
                </div>
            </div>
            
            <!-- Footer Links -->
            <div style="border-top: 2px solid rgba(148, 163, 184, 0.2); padding-top: 1.5rem; text-align: center;">
                <div style="display: flex; justify-content: center; gap: 2rem; flex-wrap: wrap; margin-bottom: 1rem;">
                    <a href="https://thaythuoctre.vn" target="_blank" style="color: #3b82f6; text-decoration: none; font-weight: 600; display: flex; align-items: center; gap: 0.5rem;">
                        üåê Website ch√≠nh th·ª©c
                    </a>
                    <a href="mailto:info@thaythuoctre.vn" style="color: #3b82f6; text-decoration: none; font-weight: 600; display: flex; align-items: center; gap: 0.5rem;">
                        üìß Li√™n h·ªá h·ªó tr·ª£
                    </a>
                </div>
                <div style="color: #94a3b8; font-size: 0.9rem; line-height: 1.5;">
                    <p style="margin: 0;">
                        üîí B·∫£o m·∫≠t d·ªØ li·ªáu | üöÄ Powered by Google Gemini AI | üß† Smart Medical Assistant | üáªüá≥ Made in Vietnam
                    </p>
                    <p style="margin: 0.5rem 0 0 0;">
                        ¬© 2024 H·ªôi Th·∫ßy thu·ªëc tr·∫ª Vi·ªát Nam. AI Medical Assistant v4.0
                    </p>
                </div>
            </div>
        </div>
        """)
        
        # EVENT HANDLERS
        submit_btn.click(
            fn=ask_question, 
            inputs=question_input, 
            outputs=answer_output,
            show_progress=True
        )
        question_input.submit(
            fn=ask_question, 
            inputs=question_input, 
            outputs=answer_output,
            show_progress=True
        )
        clear_btn.click(
            fn=lambda: ("", ""), 
            outputs=[question_input, answer_output]
        )
    
    return interface

# Create beautiful interface
print("üé® Creating beautiful modern interface...")
interface = create_beautiful_interface()

# Main execution
if __name__ == "__main__":
    print("\n" + "=" * 60)
    print("üöÄ LAUNCHING BEAUTIFUL MEDICAL AI")
    print("=" * 60)
    print(f"üì° Server: 0.0.0.0:{port}")
    print(f"üîë API Key: {'‚úÖ Configured' if GOOGLE_API_KEY != 'dummy' else '‚ùå Missing'}")
    print(f"üé® Interface: Beautiful Modern Design")
    print(f"ü§ñ AI Model: Google Gemini 1.5 Pro")
    print(f"‚ö° Features: Responsive + Animated + Professional")
    print("=" * 60)
    
    # Start initialization
    print("üî• Starting system initialization...")
    init_thread = threading.Thread(target=initialize_system, daemon=True)
    init_thread.start()
    
    time.sleep(0.5)
    
    # Launch interface
    try:
        print("üåü Launching beautiful interface...")
        interface.launch(
            server_name="0.0.0.0",
            server_port=port,
            share=False,
            show_error=True,
            show_api=False,
            quiet=False,
            favicon_path=None,
            app_kwargs={"docs_url": None, "redoc_url": None}
        )
        
    except Exception as e:
        print(f"‚ùå Primary launch failed: {e}")
        print("üîÑ Attempting fallback launch...")
        
        try:
            interface.launch(
                server_name="0.0.0.0",
                server_port=port
            )
        except Exception as e2:
            print(f"‚ùå Fallback launch failed: {e2}")
            print("üíî Unable to start server. Check configuration and try again.")
            sys.exit(1)
